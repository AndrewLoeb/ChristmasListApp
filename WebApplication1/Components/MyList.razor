@using WebApplication1.Models
@using WebApplication1.Services
@using WebApplication1.Components
@using Microsoft.AspNetCore.Components.Web
@inject googleSheetsListService ListService
@inject userIdService UserIdService
@inject ProductMetadataService MetadataService

@using Blazored.Toast
@using Blazored.Toast.Services
@inject IToastService toastService

@inherits Login

<BlazoredToasts Timeout="5"
                ShowProgressBar="true"
                IconType="IconType.FontAwesome"
                SuccessClass="success-toast-override"
                SuccessIcon="fa fa-bar-chart" />


<h2>My List</h2>
<div class="table-responsive-md">
    <table class="table table-striped">
        <thead>
            <tr>
                <th width="100px"></th>
                <th width="150px"></th>
                <th width="350px">Item</th>
                <th width="350px">Notes</th>
                <th width="200px">Link</th>
                <th width="150px">Date Added</th>
            </tr>
        </thead>
        <tbody>
            @foreach (ItemModel item in myList)
    {
            @if (@item.ItemId == editItemId)
        {
            <tr>
                <td>
                    @if (!string.IsNullOrWhiteSpace(item.ImageUrl))
                    {
                        <img src="@item.ImageUrl" alt="@item.Item" style="max-width: 80px; max-height: 80px; object-fit: contain;" />
                    }
                </td>
                <td>    <button type="button" class="btn btn-success" @onclick="() => submitEditItem(item)">Save</button> </td>
                <td> <form> <input type="text" class="form-control" @bind="@item.Item" size="40px" /> </form> </td>
                <td> <form> <input type="text" class="form-control" @bind="@item.Notes" size="40px" /> </form> </td>
                <td><form>  <input type="text" class="form-control" @bind="@item.Link" onclick="this.select();" size="20" /> </form></td>
                <td></td>
            </tr>
        }
        else
        {
        <tr>
            <td>
                @if (!string.IsNullOrWhiteSpace(item.ImageUrl))
                {
                    <img src="@item.ImageUrl" alt="@item.Item" style="max-width: 80px; max-height: 80px; object-fit: contain;" />
                }
            </td>
            <td>
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-secondary" @onclick="() => editItem(item)">Edit</button>
                    <button type="button" class="btn btn-secondary" @onclick="() => showDeleteConfirmation(item)">Delete</button>
                </div>
            </td>
            <td>@item.Item</td>
            <td style="word-wrap:break-word; max-width:350px"> @item.Notes </td>
            <td style="max-width:200px; overflow:hidden; text-overflow:ellipsis; white-space:nowrap">
                @if (!string.IsNullOrWhiteSpace(item.Link))
                {
                    <a href="@item.Link" target="_blank" title="@item.Link">@(item.Link.Length > 30 ? item.Link.Substring(0, 30) + "..." : item.Link)</a>
                }
            </td>
            <td>@item.DateUpdated</td>
        </tr>
        }
    }
        </tbody>
    </table>
</div>
    <br />
    <div>
        Add Item: 
        <form>
            <div class="form-row">
                <div class="col">
                    <input type="text" class="form-control" placeholder="New Item" @bind="newItemItem" onclick="this.select();" />
                </div>
                <div class="col">
                    <input type="text" class="form-control" placeholder="Notes (Optional)" @bind="newItemNotes" onclick="this.select();" />
                </div>
                <div class="col">
                    <input type="text" class="form-control" placeholder="Link (Optional)" @bind="newItemLink" onclick="this.select();" size="15" />
                </div>
                <div class="col">
                    <button type="button" class="btn btn-success" @onclick="addItem">Add</button>
                </div>
            </div>
        </form>
    </div>

    <hr />
    <h3>Notes to Share:</h3>
    @if (editNotesFlag == 0)
{
    <p> @myNotes </p>
    <button type="button" class="btn btn-secondary" @onclick="editNotes">Edit Notes</button>
}
else
{
    <textarea class="form-control" cols="40" rows="5" @bind="newNotes"></textarea>
    <button type="button" class="btn btn-success" @onclick="submitEditNotes">Save Notes</button>
}

<!-- Delete Confirmation Modal -->
@if (showDeleteModal)
{
    <div class="modal fade show d-block" tabindex="-1" role="dialog" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="close" @onclick="cancelDelete" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete <strong>@itemToDelete?.Item</strong>?</p>
                    <p class="text-muted">This action cannot be undone.</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="cancelDelete">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="confirmDelete">Delete</button>
                </div>
            </div>
        </div>
    </div>
}

    @code
{
        private List<ItemModel> _myList;
        private string _myNotes;

        public List<ItemModel> myList
        {
            get
            {
                if (_myList == null)
                {
                    try
                    {
                        _myList = ListService.GetMyList(UserIdService.userId);
                    }
                    catch (Exception ex)
                    {
                        toastService.ShowError($"Error loading your list: {ex.Message}");
                        _myList = new List<ItemModel>();
                    }
                }
                return _myList;
            }
        }

        public string myNotes
        {
            get
            {
                if (_myNotes == null)
                {
                    try
                    {
                        _myNotes = ListService.Users_GetList().FirstOrDefault(u => u.Name == UserIdService.userId)?.Notes ?? "";
                    }
                    catch (Exception ex)
                    {
                        toastService.ShowError($"Error loading notes: {ex.Message}");
                        _myNotes = "";
                    }
                }
                return _myNotes;
            }
        }

        public string newItemItem = "";
        public string newItemNotes = "";
        public string newItemLink = "";
        //public string newItemItem = "New Item";
        //public string newItemNotes = "Notes (Optional)";
        //public string newItemLink = "Link (Optional)";

        public int editItemId = 0;
        public int editNotesFlag = 0;
        public string newNotes = "";
        public bool showDeleteModal = false;
        public ItemModel itemToDelete = null;

        public void editNotes()
        {
            newNotes = myNotes;
            editNotesFlag = 1;
        }
        public void submitEditNotes()
        {
            ListService.UpdateNotes(UserIdService.userId, newNotes);
            _myNotes = newNotes;
            editNotesFlag = 0;
            toastService.ShowSuccess("Saved Notes");
        }
        public async Task addItem()
        {
            System.Console.WriteLine($"Added: {newItemItem}");

            if (newItemNotes.Equals("Notes (Optional)")) { newItemNotes = ""; }
            if (newItemLink.Equals("Link (Optional)")) { newItemLink = ""; }

            string imageUrl = "";
            decimal? price = null;
            string metadataFetchedDate = "";

            // If there's a link, try to fetch product metadata
            if (!string.IsNullOrWhiteSpace(newItemLink))
            {
                try
                {
                    toastService.ShowInfo("Fetching product details...");
                    var metadata = await MetadataService.FetchMetadataAsync(newItemLink);

                    if (metadata.Success)
                    {
                        imageUrl = metadata.ImageUrl ?? "";
                        price = metadata.Price;
                        metadataFetchedDate = DateTime.Now.ToString();

                        Console.WriteLine($"Fetched metadata - Image: {imageUrl}, Price: {price}");
                    }
                    else
                    {
                        Console.WriteLine($"Metadata fetch failed: {metadata.ErrorMessage}");
                    }
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"Error fetching metadata: {ex.Message}");
                    // Continue anyway - we can save without metadata
                }
            }

            ListService.AddItem(UserIdService.userId, newItemItem, newItemNotes, newItemLink, imageUrl, price, metadataFetchedDate);
            toastService.ShowSuccess("Added " + newItemItem + "!");

            //newItemItem = "New Item";
            //newItemNotes = "Notes (Optional)";
            //newItemLink = "Link (Optional)";
            newItemItem = "";
            newItemNotes = "";
            newItemLink = "";

            // Refresh the list
            _myList = null;
        }
        public void editItem(ItemModel item)
        {
            editItemId = item.ItemId;
        }
        public void submitEditItem(ItemModel item)
        {
            ListService.UpdateItem(item.ItemId, item.Item, item.Notes, item.Link);
            editItemId = 0;
            toastService.ShowSuccess("Saved " + item.Item + "!");
            // Refresh the list
            _myList = null;
        }
        public void showDeleteConfirmation(ItemModel item)
        {
            itemToDelete = item;
            showDeleteModal = true;
        }

        public void cancelDelete()
        {
            showDeleteModal = false;
            itemToDelete = null;
        }

        public void confirmDelete()
        {
            if (itemToDelete != null)
            {
                ListService.DeleteItem(itemToDelete.ItemId);
                toastService.ShowSuccess("Deleted " + itemToDelete.Item + "!");
                showDeleteModal = false;
                itemToDelete = null;
                // Refresh the list
                _myList = null;
            }
        }

    }
